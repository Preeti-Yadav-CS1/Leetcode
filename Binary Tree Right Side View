Approach 1:
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        ArrayList<Integer> res= new ArrayList<>();
        if(root==null) return res;
        LinkedList<TreeNode> qu= new LinkedList<TreeNode>();
        qu.add(root);
        while(qu.size()>0){
            int n= qu.size();
            for(int i=0; i<n;i++){
                TreeNode front= qu.remove();
                if(i==n-1) res.add(front.val);
                if(front.left!=null) qu.add(front.left);
                if(front.right!=null) qu.add(front.right);
            }
        }
        return res;
    }
}


Approach 2: Optimized
class Solution {
    List<Integer> result;
    public List<Integer> rightSideView(TreeNode root) {
        result= new ArrayList<Integer>();
        addTo(root,0);
        return result;
    }
    public void addTo(TreeNode root, int n){
        if(root==null) return;
        if(result.size()== n) result.add(root.val);
        
        addTo(root.right, n+1);
        addTo(root.left, n+1);
    }
}
