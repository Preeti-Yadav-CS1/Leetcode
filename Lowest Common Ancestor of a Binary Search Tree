Approach 1: optimized
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null)
            return null;
        if(root.val == p.val || root.val == q.val)
            return root;
 
        TreeNode left=lowestCommonAncestor(root.left,p,q);
        TreeNode right=lowestCommonAncestor(root.right,p,q);
        if(left!=null && right!=null)
            return root;
        if(left== null)
            return right;
        else
            return left;
    }
}

Approach 2: recursive:
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root==null) return null;
        if(root.val>p.val && root.val>q.val)
            return lowestCommonAncestor(root.left, p,q);
        else if(root.val<p.val && root.val<q.val)
            return lowestCommonAncestor(root.right, p,q);
        return root;
    }
}


Approach 3: Iterative
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        while(root!=null){
            if(root.val>p.val && root.val>q.val)
                root=root.left;
            else if(root.val<p.val && root.val<q.val)
                root=root.right;
            else
                return root;
        }
        return root;
    }
}
