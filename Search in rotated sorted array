Approach 1: best(optimized)
class Solution {
    public int search(int[] nums, int target) {
//         min will have the index of minimum value;
        int min= minSearch(nums);
        // find in sorted left;
        if(nums[min]<=target && target<=nums[nums.length-1]){
            return search(nums, min, nums.length-1, target);
        }
        return search(nums, 0, min, target);
    }
    public int search(int[] nums, int start, int end, int target){
        while(start<=end){
            int mid= start+(end- start)/2;
            if(nums[mid]== target) return mid;
            else if(nums[mid]> target) end=mid-1;
            else start= mid+1;
        }
        return -1;
    }
    public int minSearch(int[] nums){
        int left=0, right= nums.length-1;
        while(left<right){
            int mid= left+(right-left)/2;
            if(mid>0 && nums[mid-1]>nums[mid]) return mid;
            else if(nums[left]<=nums[mid] && nums[mid]>nums[right]){
                left=mid+1;
            }else right=mid-1;
        }
        return left;
    }
}
